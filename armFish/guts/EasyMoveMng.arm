
EasyMoveMng_Clear:
/*
		lea   rcx, [easyMoveMng]
		xor   eax, eax
		mov   qword[rcx+EasyMoveMng.pv+4*0], rax
		mov   qword[rcx+EasyMoveMng.pv+4*2], rax
		mov   qword[rcx+EasyMoveMng.expectedPosKey], rax
		mov   dword[rcx+EasyMoveMng.stableCnt], eax
		ret
*/
        lea  x1, easyMoveMng
        str  xzr, [x1, EasyMoveMng.pv+4*0]
        str  xzr, [x1, EasyMoveMng.pv+4*2]
        str  xzr, [x1, EasyMoveMng.expectedPosKey]
        str  wzr, [x1, EasyMoveMng.stableCnt]
        ret


EasyMoveMng_Get:
/*
	; in: rcx key
		xor   eax, eax
		cmp   rcx, qword[easyMoveMng.expectedPosKey]
	      cmove   eax, dword[easyMoveMng.pv+4*2]
		ret
*/
        lea  x6, easyMoveMng
        ldr  x4, [x6, EasyMoveMng.expectedPosKey]
        ldr  w5, [x6, EasyMoveMng.pv + 4*2]
        cmp  x1, x4
       csel  w0, w5, wzr, eq
        ret


EasyMoveMng_Update:
/*
	; in: rbp position
	;     rbx state
	;     rcx address of RootMove struct

	       push   rsi
		lea   rsi, [easyMoveMng]
*/
        stp  x26, x30, [sp, -16]!
        lea  x26, easyMoveMng
        
/*
		mov   edx, dword[rsi+EasyMoveMng.stableCnt]
		xor   r8d, r8d
		add   edx, 1
		mov   eax, dword[rcx+RootMove.pv+4*2]
		cmp   eax, dword[rsi+EasyMoveMng.pv+4*2]
	     cmovne   edx, r8d
		mov   dword[rsi+EasyMoveMng.stableCnt], edx
*/
        ldr  w2, [x26, EasyMoveMng.stableCnt]
        mov  w8, 0
        add  w2, w2, 1
        ldr  w0, [x1, RootMove.pv + 4*2]
        ldr  w4, [x26, EasyMoveMng.pv + 4*2]
        cmp  w0, w4
       csel  w2, w8, w2, ne
        str  w2, [x26, EasyMoveMng.stableCnt]

/*
		mov   rax, qword[rcx+RootMove.pv+4*0]
		cmp   rax, qword[rsi+EasyMoveMng.pv+4*0]
		jne   @f
		mov   ecx, dword[rcx+RootMove.pv+4*2]
		cmp   ecx, dword[rsi+EasyMoveMng.pv+4*2]
		 je   .done
	@@:
*/
        ldr  x0, [x1, RootMove.pv + 4*0]
        ldr  x4, [x26, EasyMoveMng.pv + 4*0]
        cmp  x0, x4
        bne  1f
        ldr  w1, [x1, RootMove.pv + 4*2]
        ldr  w4, [x26, EasyMoveMng.pv + 4*2]
        cmp  w1, w4
        beq  EasyMoveMng_Update.done
1:
/*
		mov   qword[rsi+EasyMoveMng.pv+4*0], rax
		mov   dword[rsi+EasyMoveMng.pv+4*2], ecx
*/
        str  x0, [x26, EasyMoveMng.pv + 4*0]
        str  w1, [x26, EasyMoveMng.pv + 4*2]

/*
	       call   SetCheckInfo
		mov   ecx, dword[rsi+EasyMoveMng.pv+4*0]
	       call   Move_GivesCheck
		mov   ecx, dword[rsi+EasyMoveMng.pv+4*0]
		mov   byte[rbx+State.givesCheck], al
	       call   Move_Do__EasyMoveMng
	       call   SetCheckInfo
		mov   ecx, dword[rsi+EasyMoveMng.pv+4*1]
	       call   Move_GivesCheck
		mov   ecx, dword[rsi+EasyMoveMng.pv+4*1]
		mov   byte[rbx+State.givesCheck], al
	       call   Move_Do__EasyMoveMng
*/
        ldr  w1, [x26, EasyMoveMng.pv + 4*0]
         bl  Move_GivesCheck
        ldr  w1, [x26, EasyMoveMng.pv + 4*0]
       strb  w0, [x21, State.givesCheck]
         bl  Move_Do__EasyMoveMng
        ldr  w1, [x26, EasyMoveMng.pv + 4*1]
         bl  Move_GivesCheck
        ldr  w1, [x26, EasyMoveMng.pv + 4*1]
       strb  w0, [x21, State.givesCheck]
         bl  Move_Do__EasyMoveMng

/*
		mov   rax, qword[rbx+State.key]
		mov   qword[rsi+EasyMoveMng.expectedPosKey], rax
*/
        ldr  x0, [x21, State.key]
        str  x0, [x26, EasyMoveMng.expectedPosKey]

/*
		mov   ecx, dword[rsi+EasyMoveMng.pv+4*1]
	       call   Move_Undo
		mov   ecx, dword[rsi+EasyMoveMng.pv+4*0]
	       call   Move_Undo
*/
        ldr  w1, [x26, EasyMoveMng.pv + 4*1]
         bl  Move_Undo
        ldr  w1, [x26, EasyMoveMng.pv + 4*0]
         bl  Move_Undo

EasyMoveMng_Update.done:
/*
		pop   rsi
		ret
*/
        ldp  x26, x30, [sp], 16
        ret

