
Move_DoNull:
/*
	       push   rsi rdi r12 r13 r14 r15
        ; stack is unaligned at this point

ProfileInc Move_DoNull


match =1, DEBUG {
	       push   rcx rdx rdi
		lea   rdi, [DebugOutput]
		mov   qword[rbp+Pos.state], rbx
	       call   Position_PrintSmall
       PrintNewLine
		mov   qword[rbp+Pos.state], rbx
	       call   Position_IsLegal
	       test   eax, eax
		jnz   Move_DoNull_posill
		pop   rdi rdx rcx
}
*/
/*
	; null move doesn't use a move picker
		mov   r12, qword[rbx-1*sizeof.State+State.endMoves]
	; copy the other important info
	      movzx   eax, word[rbx+State.rule50]
		mov   edx, dword[rbx+State.epSquare]
		mov   r8, qword[rbx+State.key]
		mov   r9, qword[rbx+State.pawnKey]
		mov   r10, qword[rbx+State.materialKey]
		mov   r11, qword[rbx+State.psq] 	; copy psq and npMaterial

	     Assert   e, qword[rbx+State.checkersBB], 0, 'assertion checkersBB = 0 failed in Move_DoNull'

		mov   qword[rbx+State.endMoves], r12
		add   rbx, sizeof.State
		xor   dword[rbp+Pos.sideToMove], 1
		xor   r8, qword[Zobrist_side]

	       test   edx, 63
		jnz   .epsq
*/
        ldr  x12, [x21, -1*sizeof.State + State.endMoves]
       ldrh  w0, [x21, State.rule50]
        ldr  w2, [x21, State.epSquare]
        ldr  x8, [x21, State.key]
        ldr  x9, [x21, State.pawnKey]
        ldr  x10, [x21, State.materialKey]
        ldr  x11, [x21, State.psq]

        str  x12, [x21, State.endMoves]
        add  x21, x21, sizeof.State
        ldr  w4, [x20, Pos.sideToMove]
        eor  w4, w4, 1
        str  w4, [x20, Pos.sideToMove]
        lea  x6, Zobrist_side
        ldr  x4, [x6]
        eor  x8, x8, x4


Move_DoNull.epsq_ret:
/*
		add   eax, 1		 ; increment 50moves
		xor   ecx, ecx
		mov   qword[rbx+State.key], r8
		mov   qword[rbx+State.pawnKey], r9
		mov   qword[rbx+State.materialKey], r10
		mov   qword[rbx+State.psq], r11
		mov   dword[rbx+State.rule50], eax
		mov   dword[rbx+State.epSquare], edx
		mov   qword[rbx+State.checkersBB], rcx

		and   r8, qword[mainHash.mask]
		shl   r8, 5
		add   r8, qword[mainHash.table]
	prefetchnta   [r8]


match =1, DEBUG {
	       push   rcx
		mov   qword[rbp+Pos.state], rbx
	       call   Position_IsLegal
	       test   eax, eax
		jnz   Move_DoNull_post_posill
		pop   rcx
}

		jmp   SetCheckInfo.AfterPrologue

	      align   8
*/

        add  w0, w0, 1
        str  x8, [x21, State.key]
        str  x9, [x21, State.pawnKey]
        str  x10, [x21, State.materialKey]
        str  x11, [x21, State.psq]
        str  w0, [x21, State.rule50]
        str  w2, [x21, State.epSquare]
        str  xzr, [x21, State.checkersBB]

        lea  x6, mainHash
        ldr  x4, [x6, MainHash.mask]
        ldr  x5, [x6, MainHash.table]
        and  x8, x8, x4
        add  x8, x5, x8, lsl 5
       prfm  PLDL1KEEP, [x8]

          b  SetCheckInfo.AfterPrologue

Move_DoNull.epsq:
/*
		mov   ecx, edx
		and   edx, 0xFFFFFF00
		add   edx, 0x00000040
		and   ecx, 7
		xor   r8, qword[Zobrist_Ep+8*rcx]
		jmp   .epsq_ret
*/
        and  w1, w2, 7
        and  w2, w2, -256
        add  w2, w2, 64
        lea  x6, Zobrist_Ep
        ldr  x4, [x6, x1, lsl 3]
        eor  x8, x8, x4
          b  Move_DoNull.epsq_ret


/*
match =1, DEBUG {

Move_DoNull_posill:
		lea   rdi, [Output]
	     szcall   PrintString, 'position did not pass Position_IsLegal in DoNullMove'
		jmp   Move_DoNull_GoError
Move_DoNull_post_posill:
		lea   rdi, [Output]
	     szcall   PrintString, 'position not legal after making null move in DoNullMove'
		jmp   Move_DoNull_GoError


Move_DoNull_GoError:
       PrintNewLine
		mov   rcx, qword[rbp+Pos.debugQWORD1]
	       call   PrintString
       PrintNewLine
		lea   rcx, [DebugOutput]
	       call   PrintString
		xor   eax, eax
	      stosd
		lea   rdi, [Output]
	       call   _ErrorBox
               int3
}
*/
