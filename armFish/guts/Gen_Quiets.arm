Gen_Quiets:
/*
	; in rbp address of position
	;    rbx address of state
	; io rdi address to write moves

	       push   rsi r12 r13 r14 r15
		mov   r15, qword [rbp+Pos.typeBB+8*White]
		 or   r15, qword [rbp+Pos.typeBB+8*Black]
		mov   r14, r15
		not   r15
		cmp   byte [rbp+Pos.sideToMove], 0
		jne   Gen_Quiets_Black
*/
        ldr  x15, [x20, Pos.typeBB + 8*White]
        ldr  x4, [x20, Pos.typeBB + 8*Black]
        orr  x15, x15, x4
        mov  x14, x15
        mvn  x15, x15
       ldrb  w4, [x20, Pos.sideToMove]
       cbnz  w4, Gen_Quiets_Black
Gen_Quiets_White:
/*
       generate_all   White, QUIETS
		pop   r15 r14 r13 r12 rsi
		ret
       generate_jmp   White, QUIETS
*/
        GenAll  Gen_Quiets_White, White, QUIETS
        ret
        GenPawnJmp  Gen_Quiets_White, White, QUIETS
        GenCastlingJmp  Gen_Quiets_White, White, QUIETS

Gen_Quiets_Black:
/*
       generate_all   Black, QUIETS
		pop   r15 r14 r13 r12 rsi
		ret
       generate_jmp   Black, QUIETS
*/
        GenAll  Gen_Quiets_Black, Black, QUIETS
        ret
        GenPawnJmp  Gen_Quiets_Black, Black, QUIETS
        GenCastlingJmp  Gen_Quiets_Black, Black, QUIETS
