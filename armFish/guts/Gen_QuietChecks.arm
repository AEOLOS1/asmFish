
Gen_QuietChecks:
/*
	; in rbp address of position
	;    rbx address of state
	; io rdi address to write moves

	       push   rsi r12 r13 r14 r15

		mov   r15, qword[rbp+Pos.typeBB+8*White]
		 or   r15, qword[rbp+Pos.typeBB+8*Black]

		mov   r14, qword[rbx+State.dcCandidates]
	       test   r14, r14
		 jz   .PopLoopDone
*/
        stp  x29, x30, [sp, -16]!

        ldr  x15, [x20, Pos.typeBB + 8*White]
        ldr  x4, [x20, Pos.typeBB + 8*Black]
        orr  x15, x15, x4
        ldr  x14, [x21, State.dcCandidates]
        cbz  x14, Gen_QuietChecks.PopLoopDone

Gen_QuietChecks.PopLoop:
/*
		bsf   r13, r14
	       blsr   r14, r14, rax
	      movzx   r12d, byte[rbp+Pos.board+r13]
		and   r12d, 7
		jmp   qword[.JmpTable+8*r12]
*/
       rbit  x13, x14
        clz  x13, x14
        sub  x0, x14, 1
        and  x14, x14, x0
        add  x6, x20, Pos.board
       ldrb  w12, [x6, x13]
        and  w12, w12, 7
        adr  x6, Gen_QuietChecks.JmpTable
        ldr  w4, [x6, x12, lsl 2]
        adr  x6, Gen_QuietChecks
        add  x4, x4, x6
         br  x4
Gen_QuietChecks.JmpTable:
/*
	dq 0;Gen_QuietChecks_Jmp.PopSkip
	dq 0;Gen_QuietChecks_Jmp.PopSkip
	dq Gen_QuietChecks.PopSkip
	dq Gen_QuietChecks_Jmp.AttacksFromKnight
	dq Gen_QuietChecks_Jmp.AttacksFromBishop
	dq Gen_QuietChecks_Jmp.AttacksFromRook
	dq Gen_QuietChecks_Jmp.AttacksFromQueen
	dq Gen_QuietChecks_Jmp.AttacksFromKing
*/
        .word 1
        .word 1
        .word Gen_QuietChecks.PopSkip - Gen_QuietChecks
        .word Gen_QuietChecks_Jmp.AttacksFromKnight - Gen_QuietChecks
	.word Gen_QuietChecks_Jmp.AttacksFromBishop - Gen_QuietChecks
	.word Gen_QuietChecks_Jmp.AttacksFromRook - Gen_QuietChecks
	.word Gen_QuietChecks_Jmp.AttacksFromQueen - Gen_QuietChecks
	.word Gen_QuietChecks_Jmp.AttacksFromKing - Gen_QuietChecks

Gen_QuietChecks.AttacksFromRet:
/*
		shl   r13d, 6
	       test   rsi, rsi
		 jz   .MoveLoopDone
*/
        lsl  w23, w23, 6
        cbz  x16, Gen_QuietChecks.MoveLoopDone

Gen_QuietChecks.MoveLoop:
/*
		bsf   rax, rsi
		 or   eax, r13d
		mov   dword[rdi], eax
		lea   rdi, [rdi+sizeof.ExtMove]
	       blsr   rsi, rsi, rdx
		jnz   .MoveLoop
*/
       rbit  x0, x16
        clz  x0, x0
        orr  w0, w0, w13
        str  w0, [x27]
        add  x27, x27, sizeof.ExtMove
        sub  x2, x16, 1
       ands  x16, x16, x2
        bne  Gen_QuietChecks.MoveLoop

Gen_QuietChecks.MoveLoopDone:


Gen_QuietChecks.PopSkip:
/*
	       test   r14, r14
		jnz   .PopLoop
*/
       cbnz  x14, Gen_QuietChecks.PopLoop

Gen_QuietChecks.PopLoopDone:
/*
		not   r15
		mov   r14, qword[rbp+Pos.typeBB+8*White]
		 or   r14, qword[rbp+Pos.typeBB+8*Black]
		cmp   byte[rbp+Pos.sideToMove], 0
		jne   Gen_QuietChecks_Black
*/
        mvn  x15, x15
        ldr  x14, [x20, Pos.typeBB + 8*White]
        ldr  x4, [x20, Pos.typeBB + 8*Black]
        orr  x14, x14, x4
       ldrb  w4, [x20, Pos.sideToMove]
       cbnz  w4, Gen_QuietChecks_Black

Gen_QuietChecks_White:
/*
       generate_all   White, QUIET_CHECKS
		pop   r15 r14 r13 r12 rsi
		ret
       generate_jmp   White, QUIET_CHECKS
*/
        GenAll  Gen_QuietChecks_White, White, QUIET_CHECKS
        ldp  x29, x30, [sp], 16
        ret
        GenPawnJmp  Gen_QuietChecks_White, White, QUIET_CHECKS
        GenCastlingJmp  Gen_QuietChecks_White, White, QUIET_CHECKS

Gen_QuietChecks_Black:
/*
       generate_all   Black, QUIET_CHECKS
		pop   r15 r14 r13 r12 rsi
		ret
       generate_jmp   Black, QUIET_CHECKS
*/
        GenAll  Gen_QuietChecks_Black, Black, QUIET_CHECKS
        ldp  x29, x30, [sp], 16
        ret
        GenPawnJmp  Gen_QuietChecks_Black, Black, QUIET_CHECKS
        GenCastlingJmp  Gen_QuietChecks_Black, Black, QUIET_CHECKS




Gen_QuietChecks_Jmp:
Gen_QuietChecks_Jmp.AttacksFromKnight:
/*
		mov   rsi, qword[KnightAttacks+8*r13]
	       andn   rsi, r15, rsi
		jmp   Gen_QuietChecks.AttacksFromRet
*/
        lea  x6, KnightAttacks
        ldr  x16, [x6, x13, lsl 3]
        bic  x16, x16, x15
          b  Gen_QuietChecks.AttacksFromRet

Gen_QuietChecks_Jmp.AttacksFromKing:
/*
		mov   rsi, qword[KingAttacks+8*r13]
	       andn   rsi, r15, rsi
	      movzx   ecx, byte [rbx+State.ksq]
		mov   rax, qword[RookAttacksPDEP+8*rcx]
		 or   rax, qword[BishopAttacksPDEP+8*rcx]
	       andn   rsi, rax, rsi
		jmp   Gen_QuietChecks.AttacksFromRet
*/
        lea  x6, KingAttacks
        ldr  x16, [x6, x13, lsl 3]
        bic  x16, x16, x15
       ldrb  w1, [x21, State.ksq]
        lea  x6, RookAttacksPDEP
        ldr  x0, [x6, x1, lsl 3]
        lea  x6, BishopAttacksPDEP
        ldr  x4, [x6, x1, lsl 3]
        orr  x0, x0, x4
        bic  x16, x16, x0
          b  Gen_QuietChecks.AttacksFromRet
        

Gen_QuietChecks_Jmp.AttacksFromBishop:
/*
      BishopAttacks   rsi, r13, r15, rax
	       andn   rsi, r15, rsi
		jmp   Gen_QuietChecks.AttacksFromRet
*/
        BishopAttacks x16, x13, x15, x0, x4
        bic  x16, x16, x15
          b  Gen_QuietChecks.AttacksFromRet

Gen_QuietChecks_Jmp.AttacksFromRook:
/*
	RookAttacks   rsi, r13, r15, rax
	       andn   rsi, r15, rsi
		jmp   Gen_QuietChecks.AttacksFromRet
*/
        RookAttacks x16, x13, x15, x0, x4
        bic  x16, x16, x15
          b  Gen_QuietChecks.AttacksFromRet

Gen_QuietChecks_Jmp.AttacksFromQueen:
/*
      BishopAttacks   rsi, r13, r15, rax
	RookAttacks   rdx, r13, r15, rax
		 or   rsi, rdx
	       andn   rsi, r15, rsi
		jmp   Gen_QuietChecks.AttacksFromRet
*/

        BishopAttacks x16, x13, x15, x0, x4
        RookAttacks x2, x13, x15, x0, x4
        orr  x16, x16, x2
        bic  x16, x16, x15
          b  Gen_QuietChecks.AttacksFromRet

